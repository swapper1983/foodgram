name: Main Foodgram workflow

on:
    push:
      branches: [ master ]

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    services:
      postgres:
        image: postgres:13.10 # 15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 isort
        pip install -r ./backend/requirements.txt

    - name: Test with flake8 and django tests
      env:
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_HOST: 127.0.0.1
        POSTGRES_PORT: 5432
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
        DEBUG: ${{ secrets.DEBUG }}
      run: |
        python -m flake8 backend/

  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_NICKNAME }}/foodgram_backend:latest
        

  frontend_tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up nodeJS
      # Это готовый воркфлоу для установки Node.js на раннер
      uses: actions/setup-node@v3
      with:
        # Это параметр воркфлоу, указывающий нужную версию Node.js
        node-version: 18

    - name: Install dependencies
      # Эта команда устанавливает зависимости для фронтенда
      run: |
        cd frontend/
        npm ci

    - name: Test frontend
      # Запускаем тесты
      run: |
        cd frontend/
        npm run test


  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_NICKNAME }}/foodgram_frontend:latest

  build_nginx_and_push_to_docker_hub:
    name: Push nginx Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./infra/
          push: true
          tags: ${{ secrets.DOCKER_NICKNAME }}/foodgram_nginx:latest

  # deploy:
  #   # if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build_and_push_to_docker_hub
  #     - build_frontend_and_push_to_docker_hub
  #     - build_gateway_and_push_to_docker_hub
  #   steps:
  #   - name: Checkout repo
  #     uses: actions/checkout@v3
  #   - name: Copy docker-compose.yml via ssh
  #     uses: appleboy/scp-action@master
  #     with:
  #       host: ${{ secrets.HOST }}
  #       username: ${{ secrets.USER }}
  #       key: ${{ secrets.SSH_KEY }}
  #       passphrase: ${{ secrets.SSH_PASSPHRASE }}
  #       source: "docker-compose.production.yml"
  #       target: "foodgram"
  #   - name: Executing remote ssh commands to deploy
  #     uses: appleboy/ssh-action@master
  #     with:
  #       host: ${{ secrets.HOST }}
  #       username: ${{ secrets.USER }}
  #       key: ${{ secrets.SSH_KEY }}
  #       passphrase: ${{ secrets.SSH_PASSPHRASE }}
  #       script: |
  #         cd foodgram
  #         sudo docker compose -f docker-compose.production.yml pull

  #         sudo docker compose -f docker-compose.production.yml down
  #         sudo docker compose -f docker-compose.production.yml up -d

  #         sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
  #         sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input
  #         sudo docker compose -f docker-compose.production.yml exec backend cp -r //app/collected_static/. //backend_static/static/
  #         sudo docker compose -f docker-compose.production.yml exec backend python manage.py load

  # send_message:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #   - name: Send message
  #     uses: appleboy/telegram-action@master
  #     with:
  #       to: ${{ secrets.TELEGRAM_TO }}
  #       token: ${{ secrets.TELEGRAM_TOKEN }}
  #       message: Деплой foodgram успешно выполнен! Коммит сделал ${{ github.actor }} с сообщением "${{ github.event.commits[0].message }}". Ссылка на коммит https://github.com/${{ github.repository }}/commit/${{github.sha}}.